{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","actions/advisorActions.js","views/advisor/EditAdvisor.js","views/advisor/Advisor.js"],"names":["_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","fetchAdvisor","dispatch","axios","get","then","api","type","GET_ADVISOR","payload","data","catch","error","returnErrors","response","message","status","getadvisor","id","advisor","ADD_ADVISOR","AddAdvisor","post","Modals","props","useState","setData","user","setUser","handleChange","e","target","name","parseInt","handleUser","show","modal","onClose","setModal","color","closeButton","action","method","encType","className","row","md","htmlFor","xs","onChange","custom","onClick","LinkName","styled","Link","MyStudent","advisors","useSelector","state","department","auth","filter","departmentId","useDispatch","useEffect","columns","selector","sortable","cell","to","surname","style","margin","ignoreRowClick","allowOverflow","striped","responsive","pagination","highlightOnHover","subHeaderAlign","noHeader"],"mappings":"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","file":"static/js/15.f9a4395f.chunk.js","sourcesContent":["export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import { returnErrors } from \"./errorActions\";\r\nimport {\r\n    GET_ADVISOR,\r\n    ADD_ADVISOR,\r\n} from './types';\r\nimport axios from 'axios';\r\n//import Cookies from 'js-cookie';\r\n\r\n\r\nexport const fetchAdvisor = () => dispatch => {\r\n    axios.get(`/api/advisor`,  )\r\n        .then(api => {\r\n            dispatch({\r\n                type: GET_ADVISOR,\r\n                payload: api.data.data\r\n            });\r\n        })\r\n       .catch(error => {\r\n        dispatch(returnErrors(error.response.data.message, error.response.status));\r\n        })\r\n}\r\nexport const getadvisor = (id) => dispatch => {\r\n    axios.get(`/api/advisor/${id}`,  )\r\n        .then(advisor => {\r\n            dispatch({\r\n                type: ADD_ADVISOR,\r\n                payload: advisor.data.data\r\n            });\r\n        })\r\n       .catch(error => {\r\n        dispatch(returnErrors(error.response.data.message, error.response.status));\r\n       })\r\n}\r\nexport const AddAdvisor = (data) => (dispatch) => {\r\n    axios.post(\"/api/advisor/create\", data,  )\r\n        .then(advisor => {\r\n            dispatch({\r\n                type: ADD_ADVISOR,\r\n                payload: advisor.data.data\r\n            });\r\n           dispatch(returnErrors(advisor.data.message, advisor.status));\r\n        })\r\n         .catch(error => {\r\n        dispatch(returnErrors(error.response.data.message, error.response.status));\r\n         })\r\n\r\n }\r\nexport const updateAdvisor = (data, id) => (dispatch) => {\r\n    axios.put(`/api/advisor/${id}`, data,  )\r\n        .then(advisor => {\r\n            dispatch({\r\n                type: ADD_ADVISOR,\r\n                payload: advisor.data.data\r\n            });\r\n           dispatch(returnErrors(advisor.data.message, advisor.status));\r\n        })\r\n       .catch(error => {\r\n        dispatch(returnErrors(error.response.data.message, error.response.status));\r\n        })\r\n\r\n}\r\nexport const deleteAdvisor = (id) => (dispatch) => {\r\n\r\n    axios.delete(`/api/advisor/${id}`,  )\r\n        .then(advisor => {\r\n            dispatch({\r\n                type: ADD_ADVISOR,\r\n                payload: advisor.data.data\r\n            });\r\n        })\r\n       .catch(error => {\r\n        dispatch(returnErrors(error.response.data.message, error.response.status));\r\n        })\r\n}\r\n","import React, { useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n  CCol,\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel,\r\n  CSelect,\r\n} from '@coreui/react'\r\n\r\nconst Modals = (props) => {\r\n    const [data, setData] = useState({});\r\n    const [user, setUser] = useState({});\r\n    const handleChange = (e) => {\r\n        const target = e.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        if(name==='userId'){\r\n            setData({\r\n                ...data,\r\n                [name]: parseInt(value)\r\n            })\r\n        }\r\n        setData({\r\n            ...data,\r\n            [name]: value\r\n        })\r\n    }\r\n    const handleUser = (e) => {\r\n        const target = e.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        setUser({\r\n            ...user,\r\n            [name]: value\r\n        })\r\n    }\r\n    // const handleSubmit = (e) => {\r\n    //     const create = {\r\n    //         userId: data.userId,\r\n    //         name: data.name,\r\n    //         surname: data.surname,\r\n    //         advisorId: data.advisorId,\r\n    //         user: user\r\n    //     }\r\n    //     e.preventDefault();\r\n    //     dispatch(AddStudents({ ...create }));\r\n    //     document.getElementById(\"resetStudent\").reset()\r\n    // }\r\n  return (\r\n    <CRow>\r\n          <CCardBody>\r\n              <CModal \r\n              show={props.modal} \r\n              onClose={() => props.setModal(!props.modal)}\r\n              color=\"primary\"\r\n            >\r\n              <CModalHeader closeButton>\r\n                <CModalTitle>Edit Student</CModalTitle>\r\n              </CModalHeader>\r\n              <CModalBody>\r\n              <CCardBody>\r\n                    <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\" id=\"resetStudent\">\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"number-input\">Student ID</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"9\">\r\n                                <CInput id=\"number-input\" type=\"number\" name=\"userId\" onChange={handleChange} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"number-input\">Name</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"9\">\r\n                                <CInput id=\"number-input\" type=\"text\" name=\"name\" onChange={handleChange} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"number-input\">Surname</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"9\">\r\n                                <CInput id=\"number-input\" type=\"text\" name=\"surname\" onChange={handleChange} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"number-input\">Username</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"9\">\r\n                                <CInput id=\"number-input\" type=\"text\" name=\"userName\" onChange={handleUser} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        {/* <CFormGroup row>\r\n                  <CCol md=\"3\">\r\n                    <CLabel htmlFor=\"email-input\">Email Input</CLabel>\r\n                  </CCol>\r\n                  <CCol xs=\"12\" md=\"9\">\r\n                    <CInput type=\"email\" id=\"email-input\" name=\"email-input\" placeholder=\"Enter Email\" autoComplete=\"email\"/>\r\n                    <CFormText className=\"help-block\">Please enter your email</CFormText>\r\n                  </CCol>\r\n                </CFormGroup> */}\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"password-input\">Password</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"9\">\r\n                                <CInput type=\"password\" id=\"password-input\" name=\"password\" onChange={handleUser} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"date-input\">Date of birth</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"9\">\r\n                                <CInput type=\"date\" id=\"date-input\" name=\"dob\" />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">advisor\r\n                                <CLabel htmlFor=\"select\">Select</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"9\">\r\n                                <CSelect custom name=\"select\" id=\"select\">\r\n                                    <option value=\"0\">Please select</option>\r\n                                    <option value=\"1\">Option #1</option>\r\n                                    <option value=\"2\">Option #2</option>\r\n                                    <option value=\"3\">Option #3</option>\r\n                                </CSelect>\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                    </CForm>\r\n                </CCardBody>\r\n              </CModalBody>\r\n              <CModalFooter>\r\n                <CButton color=\"primary\" onClick={() => props.setModal(!props.modal)}>\r\n                  Save changes\r\n                </CButton>{' '}\r\n                <CButton color=\"secondary\" onClick={() =>  props.setModal(!props.modal)}>\r\n                  Cancel\r\n                </CButton>\r\n              </CModalFooter>\r\n            </CModal>\r\n          </CCardBody>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Modals\r\n","import React,{useEffect,useState} from 'react'\r\nimport DataTable from \"react-data-table-component\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {Link} from 'react-router-dom'\r\nimport Edit from './EditAdvisor'\r\nimport {\r\n  fetchAdvisor,\r\n} from \"../../actions/advisorActions\";\r\nimport styled from 'styled-components'\r\nconst LinkName = styled(Link)`\r\n  color: #8d0000 !important;\r\n`;\r\nconst MyStudent = () => {\r\n    const advisors = useSelector((state) => state.advisor.advisors);\r\n    const department = useSelector((state) => state.auth.user.department.id);\r\n    const data= advisors.filter(advisor=>advisor.departmentId===department)\r\n    const [modal, setModal] = useState(false)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchAdvisor());\r\n    }, [dispatch]);\r\n\r\n    let columns = [\r\n      {\r\n        selector: \"name\",\r\n        name: \"Name\",\r\n        sortable: true,\r\n        cell: (row) => <LinkName to={`/advisorProfile/${row.id}`}>\r\n          {row.name + \" \" + row.surname}\r\n        </LinkName>\r\n      },\r\n      {\r\n        selector: \"surname\",\r\n        name: \"Surname\",\r\n        sortable: true,},\r\n      {\r\n        name: \"Actions\",\r\n        cell: (row) => (\r\n          <div className=\"table-icon\">\r\n            <span\r\n            style={{margin: '1rem'}}\r\n              onClick={() => {\r\n                setModal(!modal);\r\n                // getDepartmentData(row.id);\r\n              }}\r\n            >\r\n                Edit\r\n            </span>\r\n            <span >\r\n                Delete\r\n            </span>\r\n          </div>\r\n        ),\r\n        ignoreRowClick: true,\r\n        allowOverflow: true,\r\n      },\r\n      ];\r\n  return (\r\n      <>\r\n    <Edit modal={modal} setModal={setModal}/>\r\n    <DataTable\r\n            columns={columns}\r\n            data={data ? data : []}\r\n            striped={true}\r\n            responsive={true}\r\n            pagination={true}\r\n            highlightOnHover={true}\r\n            subHeaderAlign=\"center\"\r\n            noHeader={true}\r\n          />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyStudent\r\n"],"sourceRoot":""}